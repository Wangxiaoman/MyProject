package com.sys.common.util.compress;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.RandomAccessFile;
import java.util.Arrays;

import net.sf.sevenzipjbinding.ExtractAskMode;
import net.sf.sevenzipjbinding.ExtractOperationResult;
import net.sf.sevenzipjbinding.IArchiveExtractCallback;
import net.sf.sevenzipjbinding.ISequentialOutStream;
import net.sf.sevenzipjbinding.ISevenZipInArchive;
import net.sf.sevenzipjbinding.PropID;
import net.sf.sevenzipjbinding.SevenZip;
import net.sf.sevenzipjbinding.SevenZipException;
import net.sf.sevenzipjbinding.impl.RandomAccessFileInStream;
import net.sf.sevenzipjbinding.simple.ISimpleInArchive;
import net.sf.sevenzipjbinding.simple.ISimpleInArchiveItem;

import org.apache.log4j.Logger;
import org.sevenzip4j.SevenZipArchiveOutputStream;
import org.sevenzip4j.archive.SevenZipEntry;

import com.sys.common.util.IOUtils;

/** 
 *   <B>说       明</B>:7Z格式文件压缩器。
 *   <p>支持加密码。
 *
 * @author  作  者  名：WuHong<br/>
 *		   E-mail ：wuhong@vrvmail.com.cn

 * @version 版   本  号：V1.0<br/>
 *          创建时间：2013年9月29日 下午3:12:41 
 */
class SevenZCompressor extends Compressor{
	private final Logger log = Logger.getLogger(getClass());

	@Override
	protected void doCompress(File[] srcFiles, File destDir,
			boolean needPassword, String password) {
		if (needPassword) {
			throw new UnsupportedOperationException("7z格式文件压缩器不支持加密操作！");
		} else {
			SevenZipArchiveOutputStream szaos = null;
			try {
				szaos = new SevenZipArchiveOutputStream(new FileOutputStream(destDir));
				for (File f : srcFiles)
					compressFile(f, szaos, f.isDirectory() ? f.getName() : "");
			} catch (IOException e) {
				e.printStackTrace();
			} finally {
				try {
					szaos.finish();
					szaos.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}

	/**
	 *
	 * 压缩7z格式的压缩文件
	 *
	 * @param inputFile 需压缩文件
	 * @param out 输出压缩文件
	 * @param base 结束标识
	 * @throws IOException
	 */

	private synchronized void compressFile(File inputFile,
			SevenZipArchiveOutputStream out, String base) throws IOException {
		if (inputFile.isDirectory()) {
			if (inputFile.list().length == 0) {
				SevenZipEntry sevenEntry = new SevenZipEntry();
				setSevenZipEntryAttributes(inputFile, sevenEntry);
				sevenEntry.setName(base);
				sevenEntry.setSize(0);
				out.putNextEntry(sevenEntry);
			} else {
				base = base.length() == 0 ? "" : base + "/";
				File[] inputFiles = inputFile.listFiles();
				for (int i = 0; i < inputFiles.length; i++) {
					compressFile(inputFiles[i], out, base + inputFiles[i].getName());
				}
			}
		} else {
			if (base.length() > 0) {
				SevenZipEntry sevenEntry = new SevenZipEntry();
				setSevenZipEntryAttributes(inputFile, sevenEntry);
				sevenEntry.setName(base);
				out.putNextEntry(sevenEntry);
				copy(out, new FileInputStream(inputFile));
			} else {
				SevenZipEntry sevenEntry = new SevenZipEntry();
				setSevenZipEntryAttributes(inputFile, sevenEntry);
				out.putNextEntry(sevenEntry);
				copy(out, new FileInputStream(inputFile));
			}
		}
	}

	/**
	 * 设置7z压缩格式文件的相关属性
	 * 
	 * @param inputFile
	 * @param sevenEntry
	 */
	private static void setSevenZipEntryAttributes(File inputFile, SevenZipEntry sevenEntry) {
		sevenEntry.setName(inputFile.getName());
		sevenEntry.setSize(inputFile.length());
		sevenEntry.setLastWriteTime(inputFile.lastModified());
		sevenEntry.setReadonly(!inputFile.canWrite());
		sevenEntry.setHidden(inputFile.isHidden());
		sevenEntry.setDirectory(inputFile.isDirectory());
		sevenEntry.setArchive(true);
		sevenEntry.setSystem(false);
	}

	/**
	 * 拷贝文件流
	 * 
	 * @param out
	 * @param in
	 * @throws IOException
	 */
	private static void copy(OutputStream out, InputStream in)
			throws IOException {
		byte[] buf = new byte[1024];
		int i = 0;
		while ((i = in.read(buf)) != -1) {
			out.write(buf, 0, i);
		}
	}

	@Override
	protected void doDecompress(File srcFile, File destDir, boolean needPassword,
			String password) {
		try {
			if (needPassword) {
				decompressFileWithPassword(srcFile, destDir, password);
			} else {
				decompressFile(srcFile, destDir.getPath());
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 解压缩7z格式的文件，无需解压密码
	 * 
	 * @param sourceFile
	 * @param extractPath
	 * @throws SevenZipException
	 * @throws IOException
	 */
	private void decompressFile(File sourceFile, String extractPath) throws SevenZipException, IOException {
		ISevenZipInArchive inArchive = null;
		RandomAccessFile randomAccessFile = null;
		try {
			randomAccessFile = new RandomAccessFile(sourceFile, "r");
			inArchive = SevenZip.openInArchive(null, new RandomAccessFileInStream(randomAccessFile));
			inArchive.extract(null, false, new ExtractCallback(inArchive, extractPath));
		} finally {
			if (inArchive != null) {
				inArchive.close();
			}
			if (randomAccessFile != null) {
				randomAccessFile.close();
			}
		}
	}

	/** 
	 * <p>Description: [提后文件后回调方法]</p>
	 */
	private class ExtractCallback implements IArchiveExtractCallback {
		private final ISevenZipInArchive inArchive;
		private final String extractPath;
		public ExtractCallback(ISevenZipInArchive inArchive, String extractPath) {
			this.inArchive = inArchive;
			if (!extractPath.endsWith("/") && !extractPath.endsWith("\\")) {
				extractPath += File.separator;
			}
			this.extractPath = extractPath;
		}

		public ISequentialOutStream getStream(final int index, ExtractAskMode extractAskMode) throws SevenZipException {
			return new ISequentialOutStream() {
				public int write(byte[] data) throws SevenZipException {
					String filePath = inArchive.getStringProperty(index, PropID.PATH);
					FileOutputStream fos = null;
					try {
						File path = new File(extractPath + filePath);
						if (!path.getParentFile().exists()) {
							path.getParentFile().mkdirs();
						}
						if (!path.exists()) {
							path.createNewFile();
						}
						fos = new FileOutputStream(path, true);
						fos.write(data);
					} catch (IOException e) {
						e.printStackTrace();
					} finally {
						try {
							if (fos != null) {
								fos.flush();
								fos.close();
							}
						} catch (IOException e) {
							e.printStackTrace();
						}
					}
					return data.length;
				}
			};
		}

		public void setCompleted(long arg0) throws SevenZipException {
		}

		public void setTotal(long arg0) throws SevenZipException {
		}

		public void prepareOperation(ExtractAskMode arg0)
				throws SevenZipException {
		}

		public void setOperationResult(ExtractOperationResult arg0)
				throws SevenZipException {
		}
	}

	/**
	 * 解压带密码的7z格式的文件
	 * 
	 * @param sourceFile 7z格式的压缩文件
	 * @param destinationDir 解压缩目录
	 * @param password 解压密码
	 */
	private void decompressFileWithPassword( final File sourceFile ,
			final File destinationDir , final String password ){
		RandomAccessFile randomAccessFile = null;
		ISevenZipInArchive inArchive = null;
		try{
			randomAccessFile = new RandomAccessFile(sourceFile, "r");
			inArchive = SevenZip.openInArchive(null, // autodetect archive type
					new RandomAccessFileInStream(randomAccessFile));
			// Getting simple interface of the archive inArchive
			ISimpleInArchive simpleInArchive = inArchive.getSimpleInterface();
			for (final ISimpleInArchiveItem item : simpleInArchive.getArchiveItems()){
				final int[] hash = new int[] { 0 };
				if (!item.isFolder()){
					ExtractOperationResult result;
					result = item.extractSlow(new ISequentialOutStream(){
						public int write(final byte[] data) throws SevenZipException{
							try{
								if(item.getPath().indexOf(File.separator)>0){
									String path = destinationDir+File.separator+item.getPath(). substring(0,item.getPath().lastIndexOf(File.separator));
									File folderExisting = new File(path);
									if (!folderExisting.exists())
										new File(path).mkdirs();
								}
								if(!new File(destinationDir + File.separator+item.getPath()).exists()){
									destinationDir.createNewFile();
								}
								OutputStream out = new FileOutputStream(destinationDir+ File.separator+item.getPath());
								out.write(data);
								out.close();
							}catch( Exception e ){
								e.printStackTrace();
							}
							hash[0] |= Arrays.hashCode(data);
							return data.length; // Return amount of proceed data
						}
					},password); /// password.
					if (result != ExtractOperationResult.OK){
						log.error("解压"+item.getPath()+"文件时出错...");
					}
				}
			}
		} catch (Exception e){
			e.printStackTrace();
		} finally {
			if (inArchive != null){
				try {
					inArchive.close();
				} catch (SevenZipException e){
					e.printStackTrace();
				}
			}
			if (randomAccessFile != null) {
				try{
					randomAccessFile.close();
				} catch (IOException e){
					e.printStackTrace();
				}
			}
		}
	}

	@Override
	protected String getSuffix() {
		return ".7z";
	}

	@Override
	public boolean isEncryptionSupported() {
		return true;
	}

	@Override
	public boolean isFileEncrypted(File file) {
		RandomAccessFile randomAccessFile = null;
		ISevenZipInArchive inArchive = null;
		try {
			randomAccessFile = new RandomAccessFile(file, "r");
			inArchive = SevenZip.openInArchive(null, new RandomAccessFileInStream(randomAccessFile));
			ISimpleInArchive simpleInArchive = inArchive.getSimpleInterface();
			return simpleInArchive.getArchiveItem(0).isEncrypted();
		}catch (Exception e) {
			e.printStackTrace();
			return false;
		}finally{
			IOUtils.close(randomAccessFile);
			if(inArchive != null){
				try {
					inArchive.close();
				} catch (SevenZipException e) {
					e.printStackTrace();
				}
			}
		}
	}

}
